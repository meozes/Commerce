--INSERT INTO coupon (coupon_name, discount_amount, original_quantity, remaining_quantity, due_date, created_at, updated_at) VALUES
--('신규가입 할인쿠폰', 3000, 100, 100, '2024-12-31', NOW(), NOW()),
--('여름방학 특별할인', 5000, 50, 50, '2025-08-31', NOW(), NOW()),
--('크리스마스 할인쿠폰', 10000, 30, 30, '2025-12-25', NOW(), NOW()),
--('추석맞이 할인쿠폰', 7000, 80, 80, '2025-09-15', NOW(), NOW()),
--('첫 구매 할인쿠폰', 2000, 200, 200, '2024-12-31', NOW(), NOW());
--
--INSERT INTO issued_coupon (user_id, coupon_id, coupon_status, issued_at, created_at, updated_at) VALUES
--(1, 1, 'NEW', '2024-01-01 10:00:00', NOW(), NOW()),
--(1, 2, 'USED', '2024-01-02 11:00:00', NOW(), NOW()),
--(2, 1, 'NEW', '2024-01-03 12:00:00', NOW(), NOW()),
--(2, 3, 'USED', '2024-01-04 13:00:00', NOW(), NOW()),
--(3, 4, 'NEW', '2024-01-05 14:00:00', NOW(), NOW());
--
--INSERT INTO product (product_name, price, created_at, updated_at)
--VALUES
--    ('iPhone 15', 1200000, NOW(), NOW()),
--    ('Galaxy S24', 1300000, NOW(), NOW()),
--    ('MacBook Pro', 2500000, NOW(), NOW()),
--    ('iPad Air', 800000, NOW(), NOW()),
--    ('Galaxy Watch', 400000, NOW(), NOW());
--
--INSERT INTO stock (product_id, origin_stock, remaining_stock, created_at, updated_at)
--VALUES
--    (1, 100, 100, NOW(), NOW()),
--    (2, 150, 150, NOW(), NOW()),
--    (3, 50, 50, NOW(), NOW()),
--    (4, 200, 200, NOW(), NOW()),
--    (5, 300, 300, NOW(), NOW());
--
--INSERT INTO balance (user_id, balance, created_at, updated_at)
--VALUES
--    (1, 1000000, NOW(), NOW()),
--    (2, 500000, NOW(), NOW());
--
--INSERT INTO balance_history (balance_id, type, amount, total_amount, created_at, updated_at)
--VALUES
--    (1, 'CHARGE', 1000000, 1000000, NOW(), NOW()),
--    (1, 'USE', 150000, 850000, NOW(), NOW()),
--    (1, 'CHARGE', 200000, 1050000, NOW(), NOW()),
--    (1, 'USE', 50000, 1000000, NOW(), NOW());
--
--INSERT INTO balance_history (balance_id, type, amount, total_amount, created_at, updated_at)
--VALUES
--    (2, 'CHARGE', 500000, 500000, NOW(), NOW()),
--    (2, 'USE', 100000, 400000, NOW(), NOW()),
--    (2, 'CHARGE', 100000, 500000, NOW(), NOW());
--
--
--INSERT INTO orders (user_id, original_amount, final_amount, discount_amount, order_status, created_at, updated_at)
--VALUES
--    -- 사용자 1의 주문들
--    (1, 1200000, 1197000, 3000, 'COMPLETED', '2024-01-01 10:30:00', '2024-01-01 10:30:00'),
--    (1, 2500000, 2500000, 0, 'COMPLETED', '2024-01-02 15:45:00', '2024-01-02 15:45:00'),
--    (1, 400000, 400000, 0, 'PENDING', '2024-01-03 09:15:00', '2024-01-03 09:15:00'),
--
--    -- 사용자 2의 주문들
--    (2, 1300000, 1290000, 10000, 'COMPLETED', '2024-01-02 11:20:00', '2024-01-02 11:20:00'),
--    (2, 800000, 800000, 0, 'CANCELED', '2024-01-03 14:30:00', '2024-01-03 14:30:00');
--
--
--INSERT INTO order_item (order_id, product_id, product_name, quantity, product_price, total_price, created_at, updated_at)
--VALUES
--    -- 사용자 1의 주문 아이템들
--    (1, 1, 'iPhone 15', 1, 1200000, 1200000, '2024-01-01 10:30:00', '2024-01-01 10:30:00'),
--    (2, 3, 'MacBook Pro', 1, 2500000, 2500000, '2024-01-02 15:45:00', '2024-01-02 15:45:00'),
--    (3, 5, 'Galaxy Watch', 1, 400000, 400000, '2024-01-03 09:15:00', '2024-01-03 09:15:00'),
--
--    -- 사용자 2의 주문 아이템들
--    (4, 2, 'Galaxy S24', 1, 1300000, 1300000, '2024-01-02 11:20:00', '2024-01-02 11:20:00'),
--    (5, 4, 'iPad Air', 1, 800000, 800000, '2024-01-03 14:30:00', '2024-01-03 14:30:00');
--
-- INSERT INTO payment (order_id, user_id, amount, payment_status, created_at, updated_at)
-- VALUES
--     -- 사용자 1의 결제들
--     (1, 1, 1197000, 'COMPLETED', '2024-01-01 10:31:00', '2024-01-01 10:31:00'),
--     (2, 1, 2500000, 'COMPLETED', '2024-01-02 15:46:00', '2024-01-02 15:46:00'),
--     (3, 1, 400000, 'PENDING', '2024-01-03 09:15:00', '2024-01-03 09:15:00'),
--
--     -- 사용자 2의 결제들
--     (4, 2, 1290000, 'COMPLETED', '2024-01-02 11:21:00', '2024-01-02 11:21:00'),
--     (5, 2, 800000, 'FAILED', '2024-01-03 14:31:00', '2024-01-03 14:31:00');

---- 만건
--SET SESSION cte_max_recursion_depth = 10000;
--
--DELETE FROM stock;
--
---- 1. Product 데이터 삽입
--INSERT INTO product (product_name, price, created_at, updated_at)
--WITH RECURSIVE products AS (
--    SELECT
--        0 AS id,
--        0 AS product_name,
--        1000 + FLOOR(RAND() * 100000) AS price
--    UNION ALL
--    SELECT
--        id + 1,
--        id + 1,
--        1000 + FLOOR(RAND() * 100000)
--    FROM products
--    WHERE id < 9999
--)
--SELECT product_name, price, NOW(), NOW() FROM products;
--
---- 2. Stock 데이터 삽입
--INSERT INTO stock (product_id, origin_stock, remaining_stock, created_at, updated_at)
--WITH RECURSIVE stocks AS (
--    SELECT
--        1 AS product_id,
--        100 + FLOOR(RAND() * 900) AS stock_amount
--    UNION ALL
--    SELECT
--        product_id + 1,
--        100 + FLOOR(RAND() * 900)
--    FROM stocks
--    WHERE product_id < 10000
--)
--SELECT product_id, stock_amount, stock_amount, NOW(), NOW() FROM stocks;


--SET SESSION cte_max_recursion_depth = 100000;
--
---- 외래 키 제약조건 일시적으로 비활성화
--SET FOREIGN_KEY_CHECKS = 0;
--
---- 테이블 비우기
--TRUNCATE TABLE stock;
--TRUNCATE TABLE product;
--
---- 1. Product 데이터 삽입 - AUTO_INCREMENT 컬럼이 있어도 직접 ID 설정
--ALTER TABLE product AUTO_INCREMENT = 1;
--INSERT INTO product (id, product_name, price, created_at, updated_at)
--WITH RECURSIVE products AS (
--    SELECT
--        1 AS id,
--        1 AS product_name,
--        1000 + FLOOR(RAND() * 100000) AS price
--    UNION ALL
--    SELECT
--        id + 1,
--        id + 1,
--        1000 + FLOOR(RAND() * 100000)
--    FROM products
--    WHERE id < 100000
--)
--SELECT id, product_name, price, NOW(), NOW() FROM products;
--
---- 2. Stock 데이터 삽입
--INSERT INTO stock (product_id, origin_stock, remaining_stock, created_at, updated_at)
--SELECT
--    id,
--    100 + FLOOR(RAND() * 900),
--    100 + FLOOR(RAND() * 900),
--    NOW(),
--    NOW()
--FROM
--    product;
--
---- 외래 키 제약조건 다시 활성화
--SET FOREIGN_KEY_CHECKS = 1;

--SET SESSION cte_max_recursion_depth = 100000;
--
---- 먼저 orders 테이블에 데이터 생성
--INSERT INTO orders
--    (user_id, original_amount, final_amount, discount_amount, order_status, created_at, updated_at)
--SELECT
--    FLOOR(1 + RAND() * 100) as user_id, -- 1-100 사이의 유저 ID
--    FLOOR(50000 + RAND() * 450000) as original_amount, -- 50000-500000 사이의 원래 금액
--    FLOOR(50000 + RAND() * 450000) as final_amount,
--    FLOOR(RAND() * 50000) as discount_amount, -- 0-50000 사이의 할인 금액
--    ELT(FLOOR(1 + RAND() * 3), 'COMPLETED', 'CANCELED', 'COMPLETED') as order_status, -- COMPLETED가 더 많게
--    DATE_ADD('2025-01-01', INTERVAL FLOOR(RAND() * 43) DAY) as created_at,
--    DATE_ADD('2025-01-01', INTERVAL FLOOR(RAND() * 43) DAY) as updated_at
--FROM
--    information_schema.columns c1,
--    (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5) c2,
--    (SELECT 1 UNION SELECT 2) c3
--LIMIT 1000;
--
--INSERT INTO orders
--    (user_id, original_amount, final_amount, discount_amount, order_status, created_at, updated_at)
--SELECT
--    FLOOR(1 + RAND() * 1000) as user_id, -- 1-1000 사이의 유저 ID
--    FLOOR(50000 + RAND() * 450000) as original_amount,
--    FLOOR(50000 + RAND() * 450000) as final_amount,
--    FLOOR(RAND() * 50000) as discount_amount,
--    'COMPLETED' as order_status, -- COMPLETED 상태만 생성
--    DATE_ADD('2025-01-01', INTERVAL FLOOR(RAND() * 43) DAY) as created_at,
--    DATE_ADD('2025-01-01', INTERVAL FLOOR(RAND() * 43) DAY) as updated_at
--FROM
--    information_schema.columns c1,
--    (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5) c2,
--    (SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5) c3
--LIMIT 10000;  -- 약 10000개의 COMPLETED 주문 생성
--
---- 모든 주문에 대해 각각 1-5개의 상품 추가 (평균 약 3개)
---- 첫 번째 INSERT: 모든 주문에 대해 최소 1개의 상품 항목 추가
--INSERT INTO order_item
--    (order_id, product_id, product_name, quantity, product_price, total_price, created_at, updated_at)
--SELECT
--    o.id as order_id,
--    FLOOR(1 + RAND() * 20) as product_id,
--    CONCAT('상품', FLOOR(1 + RAND() * 20)) as product_name,
--    FLOOR(1 + RAND() * 5) as quantity,
--    FLOOR(10000 + RAND() * 90000) as product_price,
--    FLOOR(1 + RAND() * 5) * FLOOR(10000 + RAND() * 90000) as total_price,
--    o.created_at,
--    o.created_at as updated_at
--FROM
--    orders o;
--
---- 두 번째 INSERT: 약 80%의 주문에 대해 추가 상품 항목 추가
--INSERT INTO order_item
--    (order_id, product_id, product_name, quantity, product_price, total_price, created_at, updated_at)
--SELECT
--    o.id as order_id,
--    FLOOR(1 + RAND() * 20) as product_id,
--    CONCAT('상품', FLOOR(1 + RAND() * 20)) as product_name,
--    FLOOR(1 + RAND() * 5) as quantity,
--    FLOOR(10000 + RAND() * 90000) as product_price,
--    FLOOR(1 + RAND() * 5) * FLOOR(10000 + RAND() * 90000) as total_price,
--    o.created_at,
--    o.created_at as updated_at
--FROM
--    orders o
--WHERE RAND() < 0.8;  -- 약 80%의 주문에 대해서만 두 번째 상품 추가
--
---- 세 번째 INSERT: 약 60%의 주문에 대해 추가 상품 항목 추가
--INSERT INTO order_item
--    (order_id, product_id, product_name, quantity, product_price, total_price, created_at, updated_at)
--SELECT
--    o.id as order_id,
--    FLOOR(1 + RAND() * 20) as product_id,
--    CONCAT('상품', FLOOR(1 + RAND() * 20)) as product_name,
--    FLOOR(1 + RAND() * 5) as quantity,
--    FLOOR(10000 + RAND() * 90000) as product_price,
--    FLOOR(1 + RAND() * 5) * FLOOR(10000 + RAND() * 90000) as total_price,
--    o.created_at,
--    o.created_at as updated_at
--FROM
--    orders o
--WHERE RAND() < 0.6;  -- 약 60%의 주문에 대해서만 세 번째 상품 추가
--
---- 네 번째 INSERT: 약 30%의 주문에 대해 추가 상품 항목 추가
--INSERT INTO order_item
--    (order_id, product_id, product_name, quantity, product_price, total_price, created_at, updated_at)
--SELECT
--    o.id as order_id,
--    FLOOR(1 + RAND() * 20) as product_id,
--    CONCAT('상품', FLOOR(1 + RAND() * 20)) as product_name,
--    FLOOR(1 + RAND() * 5) as quantity,
--    FLOOR(10000 + RAND() * 90000) as product_price,
--    FLOOR(1 + RAND() * 5) * FLOOR(10000 + RAND() * 90000) as total_price,
--    o.created_at,
--    o.created_at as updated_at
--FROM
--    orders o
--WHERE RAND() < 0.3;  -- 약 30%의 주문에 대해서만 네 번째 상품 추가
--
---- 다섯 번째 INSERT: 약 10%의 주문에 대해 추가 상품 항목 추가
--INSERT INTO order_item
--    (order_id, product_id, product_name, quantity, product_price, total_price, created_at, updated_at)
--SELECT
--    o.id as order_id,
--    FLOOR(1 + RAND() * 20) as product_id,
--    CONCAT('상품', FLOOR(1 + RAND() * 20)) as product_name,
--    FLOOR(1 + RAND() * 5) as quantity,
--    FLOOR(10000 + RAND() * 90000) as product_price,
--    FLOOR(1 + RAND() * 5) * FLOOR(10000 + RAND() * 90000) as total_price,
--    o.created_at,
--    o.created_at as updated_at
--FROM
--    orders o
--WHERE RAND() < 0.1;  -- 약 10%의 주문에 대해서만 다섯 번째 상품 추가
